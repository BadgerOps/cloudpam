name: Release Builds

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-matrix:
    name: Build archives
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64

    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      CGO_ENABLED: 0
      VERSION: ${{ github.event.release.tag_name }}
      APP_VERSION: ${{ github.event.release.tag_name }}

    steps:
      - name: Checkout tag
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Show tree (debug)
        run: |
          pwd
          ls -la
          ls -la cmd || true
          ls -la cmd/cloudpam || true

      - name: Build (sqlite-enabled, static)
        run: |
          set -euo pipefail
          BIN=cloudpam
          EXT=""
          if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
          OUT="$BIN$EXT"
          mkdir -p build
          echo "Building $GOOS/$GOARCH (sqlite) -> build/$OUT"
          ENTRY="./cmd/cloudpam"
          if [ ! -d "$ENTRY" ]; then
            echo "fallback: ./cmd/cloudpam not found; probing for main package under ./cmd/* or root"
            pick=""
            if [ -d cmd ]; then
              pick=$(for d in cmd/*; do [ -f "$d/main.go" ] && echo "$d"; done | head -n1)
            fi
            if [ -z "$pick" ] && [ -f main.go ]; then pick="."; fi
            if [ -z "$pick" ]; then echo "no entry point found"; exit 1; fi
            ENTRY="$pick"
            echo "using entry: $ENTRY"
          fi
          go build -trimpath -tags sqlite -ldflags "-s -w" -o "build/$OUT" "$ENTRY"

      - name: Package
        run: |
          set -euo pipefail
          mkdir -p dist
          BASE="cloudpam_${VERSION}_${GOOS}_${GOARCH}"
          if [ "${GOOS}" = "windows" ]; then \
            (cd build && zip -9 "../dist/${BASE}.zip" cloudpam.exe) ; \
          else \
            tar -C build -czf "dist/${BASE}.tar.gz" cloudpam ; \
          fi

      - name: Checksums
        shell: bash
        run: |
          set -euo pipefail
          cd dist
          if compgen -G "*.tar.gz" > /dev/null || compgen -G "*.zip" > /dev/null; then
            sha256sum * > SHA256SUMS.txt
          fi

      - name: Upload artifacts (for workflow logs)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ format('artifacts-{0}-{1}', matrix.goos, matrix.goarch) }}
          path: |
            dist/*

  attach-to-release:
    name: Attach assets to release
    needs: build-matrix
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten artifact directory
        run: |
          shopt -s globstar nullglob
          mkdir -p out
          mv dist/**/dist/* out/ || true
          ls -la out || true

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            out/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
